---
# Set OS variables
- name: Set os_family dependent variables
  ansible.builtin.include_vars: '{{ ansible_os_family }}.yml'

- name: Set distribution dependent variables
  ansible.builtin.include_vars: '{{ vars_file }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml'
      skip: true
  loop_control:
    loop_var: vars_file

# Install packages
- name: Install podman packages
  ansible.builtin.package:
    name: "{{ podman_packages }}"
    state: present
  when: not ansible_check_mode

# Root configuration
- name: Include tasks for /etc/containers configuration
  ansible.builtin.include_tasks: conf.yml
  when: podman_configure | bool

# Sysctl
- name: Set sysctl config (Archlinux)
  ansible.posix.sysctl:
    name: kernel.unprivileged_userns_clone
    value: '1'
    sysctl_file: /etc/sysctl.d/99-kernel-unprivileged-userns.conf
    reload: true
  when: ansible_os_family == 'Archlinux'

# Users
# Set uid:gid, according to https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md
- name: Update /etc/subuid for podman users
  ansible.builtin.lineinfile:
    path: /etc/subuid
    regex: '^{{ item.key }}:'
    line: '{{ item.key }}:{{ item.value }}'
  with_dict: "{{ podman_users }}"
  when: podman_manual_mapping|bool

- name: Update /etc/subgid for podman users
  ansible.builtin.lineinfile:
    path: /etc/subgid
    regex: '^{{ item.key }}:'
    line: '{{ item.key }}:{{ item.value }}'
  with_dict: "{{ podman_users }}"
  when: podman_manual_mapping|bool

- name: Set getent_passwd fact
  ansible.builtin.getent:
    database: passwd

- name: Create directory
  ansible.builtin.file:
    path: "{{ getent_passwd[item.key][4] }}/.config/containers"
    state: directory
    owner: "{{ getent_passwd[item.key][1] }}"
    group: "{{ getent_passwd[item.key][2] }}"
    mode: "0755"
  loop: "{{ podman_users|dict2items }}"

- name: Deploy user configuration
  ansible.builtin.template:
    src: home/containers.conf.j2
    dest: "{{ getent_passwd[item.key][4] }}/.config/containers/containers.conf"
    owner: "{{ getent_passwd[item.key][1] }}"
    group: "{{ getent_passwd[item.key][2] }}"
    mode: "0644"
  loop: "{{ podman_users|dict2items }}"

- name: Deploy user storage configuration
  ansible.builtin.template:
    src: home/storage.conf.j2
    dest: "{{ getent_passwd[item.key][4] }}/.config/containers/storage.conf"
    owner: "{{ getent_passwd[item.key][1] }}"
    group: "{{ getent_passwd[item.key][2] }}"
    mode: "0644"
  loop: "{{ podman_users|dict2items }}"

# According to https://docs.gitlab.com/runner/executors/docker.html#use-podman-to-run-docker-commands
- name: Enable socket
  when: podman_enable_user_socket
  block:
    - name: Check if user lingering is enabled for user
      become: true
      ansible.builtin.shell: loginctl show-user "{{ item.key }}" | grep -q 'Linger=yes'
      register: linger_check
      changed_when: false
      with_dict: "{{ podman_users }}"
      check_mode: false
    - name: Enable user lingering for podman_users
      become: true
      ansible.builtin.command: loginctl enable-linger "{{ item.key }}"
      when: item.rc != 0
      loop: "{{ linger_check.results }}"
    - name: Enable and start podman.socket
      ansible.builtin.systemd:
        name: podman.socket
        state: started
        enabled: true
        scope: user
      with_dict: "{{ podman_users }}"
      become: true
      become_user: "{{ item.key }}"
