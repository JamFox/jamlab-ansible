job "promtail" {
    datacenters = ["dc1"]
    type = "system"
  
    group "promtail" {
      count = 1
  
      network {
        port "http" {
          static = 3200
        }
      }
  
      restart {
        attempts = 3
        delay    = "20s"
        mode     = "delay"
      }
  
      task "promtail" {
        driver = "podman"
        logs {
          max_files     = 3
          max_file_size = 5
        }
  
        env {
          HOSTNAME = "${attr.unique.hostname}"
        }
  
        template {
  data        = <<EOTC
  positions:
    filename: /data/positions.yml
  
  server:
    log_level: info
  
  clients:
    - url: http://{{ vars_common_all_loki_ipv4 }}/loki/api/v1/push
  
  scrape_configs:
  - job_name: 'nomad-logs'
    consul_sd_configs:
        - server: '{{ "{{ env \"NOMAD_IP_http\" }}" }}:8501'
          scheme: https
  
    relabel_configs:
      # If there is a nomad service registered in consul with 'logs.promtail=true' tag - grab it
      - source_labels: [__meta_consul_tags]
        regex: '(.*)logs\.promtail=true(.*)'
        action: keep
  
      - source_labels: [__meta_consul_node]
        target_label: __host__
  
      - source_labels: [__meta_consul_service_metadata_external_source]
        target_label: source
        regex: (.*)
        replacement: '$1'
  
      - source_labels: [__meta_consul_service_id]
        regex: '_nomad-task-([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})-.*'
        target_label:  'task_id'
        replacement: '$1'
  
      - source_labels: [__meta_consul_service]
        target_label: job
  
      - source_labels: ['__meta_consul_node']
        regex:         '(.*)'
        target_label:  'instance'
        replacement:   '$1'
  
      - source_labels: [__meta_consul_service_id]
        regex: '_nomad-task-([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})-.*'
        target_label:  '__path__'
  
        replacement: '/nomad/$1/alloc/logs/*std*.{?,??}'
  EOTC
          destination = "/local/promtail.yml"
        }
  
        config {
          image = "docker.io/grafana/promtail"
          ports = ["http"]
          args = [
            "-config.file=/local/promtail.yml",
            "-server.http-listen-port=${NOMAD_PORT_http}",
          ]
          volumes = [
            # Copy positions from host
            "/var/lib/promtail:/data",
            # Read nomad logs
            "/var/nomad/alloc:/nomad/:ro",
          ]
        }
  
        resources {
          cpu    = 100
          memory = 50
          memory_max = 100
        }
  
        service {
          name = "promtail"
          port = "http"
          tags = ["monitoring"]
  
          check {
            name     = "Promtail HTTP"
            type     = "http"
            path     = "/targets"
            interval = "5s"
            timeout  = "2s"
  
            check_restart {
              limit           = 2
              grace           = "60s"
              ignore_warnings = false
            }
          }
        }
      }
    }
}